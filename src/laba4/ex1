import csv
from pathlib import Path
from typing import List, Tuple, Optional


# Читаем содержимое текста из файла
def read_text(path: str | Path, encoding: str = "utf-8") -> str:
    try:
        return Path(path).read_text(encoding=encoding)
    except FileNotFoundError:
        return "Файл не найден."
    except UnicodeDecodeError:
        return "Ошибка кодирования файла."


# Запись данных в CSV файл
def write_csv(
    rows: List[Tuple],
    path: str | Path,
    header: Optional[Tuple[str, ...]] = None
) -> None:
    p = Path(path)
    
    # Создаем родительские директории, если их нет
    ensure_parent_dir(p)
    
    with p.open('w', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        
        # Проверяем наличие заголовков
        if header is not None:
            writer.writerow(header)
            
        # Проверяем наличие данных
        if rows:
            first_row_len = len(rows[0])
            for row in rows:
                if len(row) != first_row_len:
                    raise ValueError(f"Все строки должны иметь одинаковое число столбцов.")
            writer.writerows(rows)


# Создание папок для хранения файла, если их ещё нет
def ensure_parent_dir(path: str | Path) -> None:
    parent_path = Path(path).parent
    parent_path.mkdir(parents=True, exist_ok=True)


# Использование функций
if __name__ == "__main__":
    print(read_text(r"C:\Users\denis\python_labs\data\input.txt"))  # чтение содержимого файла input.txt
    write_csv([("word", "count"), ("test", 3)], r"C:\Users\denis\python_labs\data\check.csv")  # запись в check.csv